#
# This is a simulation of a thin slab of Si, a photoconductor.
#
# 07/16/2020

####################################################################################################
# Configuration
####################################################################################################

# Whether to run the generation of the structure file, and use a prebuilt. This must be set to false
# for the variable testing loops to work, or else Athena will try to open $file_str on the second
# iteration, for some reason. If this is false, "PC.str"/"Diode.str" will be used as the structure
# file.
set run_athena = false
# Whether to run the physics simulation. This is useful for just generating the structure file, to
# skip that step in the future.
set run_atlas = true

####################################################################################################
# Experimental Variables
####################################################################################################

# Length of the silicon substrate, in microns.
set si_len = 100
# Type of the device. Must be "PC" to use a photoconductor, or "Diode" to use a diode.
set device_t = Diode
# Material used as the dopant for the bulk of the device.
set dopant_bulk_m = phosphorus
# The diode has a more complex layout for the doping materials. Only phosphorus is supported.
if cond = ($device_t = Diode & $dopant_bulk_m ^= phosphorus)
  quit
if.end
# Concentration of the bulk dopant.
if cond = ($device_t = PC)
  set dopant_c = 1e15
else cond = ($device_t = Diode)
  set dopant_c = 1e12
if.end
# Type of the bulk dopant.
if cond = ($dopant_bulk_m = phosphorus)
  set dopant_t = Nsub
else cond = ($dopant_bulk_m = boron)
  set dopant_t = Psub
if.end
# Voltage applied to the device.
set voltage = 1000
# Lifetime of electrons and electron holes, in s.
set lifetime = 1e-7
# Density of the electron/hole pairs, in pC/micron.
set ehp_density = 1e-4

####################################################################################################
# Experimental Variable Testing Loops
####################################################################################################

# Lifetime testing loop.
#loop steps = 3
#assign name=lifetime n.value=(1e-7, 1e-6, 1e-5)

# Density testing loop.
#loop steps = 11
#assign name=ehp_density n.value=(1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1, 1e2, 1e3, 1e4, 1e5)

####################################################################################################
# File Paths
####################################################################################################

# Name of the experiment. Don't append variables to this unless they deviate from the default of the
# current baseline.
if cond = ($device_t = PC)
  set exp_name = PC
else cond = ($device_t = Diode)
  set exp_name = Diode
else cond = ($device_t ^= PC & $device_t ^= Diode)
  # Unsupported device type.
  quit
if.end
if cond = ($si_len ^= 100)
  set exp_name = "${exp_name}_${si_len}um"
if.end
if cond = ($dopant_t ^= Nsub)
  set exp_name = "${exp_name}_${dopant_t}"
if.end
if cond = ($device_t = PC)
  if cond = ($dopant_c ^= 1e15)
    set exp_name = "${exp_name}_${dopant_c}"
  if.end
  else cond = ($device_t = Diode)
    if cond = ($dopant_c ^= 1e12)
      set exp_name = "${exp_name}_${dopant_c}"
    if.end
  if.end
if cond = ($voltage ^= 10)
  set exp_name = "${exp_name}_voltage${voltage}"
if.end
if cond = ($lifetime ^= 1e-7)
  set exp_name = "${exp_name}_lifetime${lifetime}"
if.end
if cond = ($ehp_density ^= 1e-5)
  set exp_name = "${exp_name}_ehpdensity${ehp_density}"
if.end
# Name of the structure file.
if cond = ($run_athena = false)
  if cond = ($device_t = PC)
    set file_str = "PC.str"
  else cond = ($device_t = Diode)
    set file_str = "Diode.str"
  if.end
else 
  set file_str = "${exp_name}.str"
if.end
# Name of the log file for varying voltage.
set file_volt_log = "${exp_name}_voltage.log"
# Name of the log file for varying time.
set file_time_log = "${exp_name}_time.log"
# Name of the solution file.
set file_sta = "${exp_name}.sta"

####################################################################################################
# Athena
####################################################################################################

if cond = ($run_athena = true)
  # Start the Athena simulator, for creating the structure.
  go athena

  # Define the initial rectangular grid. Make it 1 micron wide, and a given length long.
  line x loc=0 spac=0.5
  line x loc=1 spac=0.5
  line y loc=0 spac=0.1
  line y loc=$si_len spac=0.1

  # Define the initial substrate from the rectangular grid. Use silicon as the starting material,
  # with a given dopant concentration. Since we specify phosphorus here, Athena will look up the
  # c.resistivity value from the internal resistivity vs. concentration tables, which can be used
  # for boron, phosphorus, arsenic, and antimony.
  init silicon c.$dopant_bulk_m=$dopant_c orientation=100 two.d

  if cond = ($device_t = Diode)
    # Add Boron doping to the edge.
    implant boron dose=1.0e15 energy=10 tilt=0 rotation=0 amorph
  if.end

  # Length of the aluminum deposits, in microns.
  set al_len = 1

  # Deposit a layer of aluminum at the top.
  deposit aluminum thick=$al_len division=5

  # Deposit a layer of aluminum at the bottom.
  structure flip.y
  if cond = ($device_t = Diode)
    # Dope the aluminum a little.
    implant phosphor dose=1.0e15 energy=10 tilt=0 rotation=0 amorph
  if.end
  deposit aluminum thick=$al_len division=5
  structure flip.y

  # Define the upper aluminum material region as an electrode.
  electrode name=cathode x=0.5 y=-0.1
  # Define the lower aluminum material region as an electrode
  electrode name=substrate x=0.5 y=$si_len+0.1

  # Save the mesh to the structure file.
  struct outf=$file_str
if.end

####################################################################################################
# Atlas
####################################################################################################

if cond = ($run_atlas = true)
  # Start the Atlas simulator, for simulating the physics.
  go atlas

  # Read the mesh from the structure file.
  mesh inf=$file_str

  # Configure the electrodes as ohmic.
  contact name=substrate neutral
  contact name=cathode neutral
  # Configure the electron and hole lifetime parameters.
  material region=1 taun0=$lifetime taup0=$lifetime
  # Enable default models used for bipolar devices.
  models bipolar
  # Use Newton's method for solving, specifying the amount of carrier continuity equations to solve,
  # whether to reduce electrode bias steps if the solution diverges, the amount of allowed outer
  # loops, the amount of allowed trap procedures, and the maximum time-step.
  method newton carriers=2 trap itlimit=20 maxtraps=10 dt.max=0.02e-9

  # Time at which the single-event upset starts. This is shifted away from 0 in order to create a
  # plateau at the beginning of the time vs. charge graph.
  set time_event_start = 1e-6

  # Introduce a single-event upset, with a given number of electron-hole pairs, moving with a given
  # radius.
  singleeventupset entrypoint="0,50" exitpoint="1,50" pcunits b.density=$ehp_density radialgauss \
                    radius=1 t0=$time_event_start tc=0

  # Solve with initial parameters.
  solve initial

  # Include the net charge and mobilities in the output.
  output charge e.mobility h.mobility
  # Forward any voltage/current data generated by "solve" while varying the voltage to the log file.
  # log outf=$file_volt_log
  # Solve with an increasingly high voltage applied to the substrate electrode.
  solve vsubstrate=0 vstep=1 vfinal=$voltage name=substrate
  # Save the structure and solution to the solution file.
  # save outf=$file_sta

  # Forward any voltage/current data generated by "solve" while varying the time to the log file.
  log outf=$file_time_log

  # Simulate the pedestal of the current, with large time-steps.
  method newton carriers=2 trap itlimit=20 maxtraps=10 dt.max=100e-9
  solve tfinal=$time_event_start tstep=1e-9

  # Simulate the development of the pulse. Start with pulse_length = 1000-9 (1e-6), and then fit it
  # to the size of the pulse, using the plot. dt.max is adjusted so that there are ~50 points.
  #
  # For high voltages and higher densities, a smaller initial timestep (1e-12) is also necessary.
  set pulse_length = 1000e-9
  set time_pulse_end = $time_event_start + $pulse_length
  method newton carriers=2 trap itlimit=20 maxtraps=10 dt.max=$pulse_length/50
  solve tfinal=$time_pulse_end tstep=1e-9

  # Simulate the rest of the pedestal.
  method newton carriers=2 trap itlimit=20 maxtraps=10 dt.max=100e-9
  solve tfinal=2*$time_pulse_end tstep=1e-9
if.end

####################################################################################################
# Cleanup
####################################################################################################

# End density testing loop.
#l.end

# End lifetime testing loop.
#l.end

# Open the result.
# tonyplot $file_time_log

# Beep upon completion. Beep 3 times so that this is distinguishable from DeckBuild error dialogs.
loop steps = 3
  system rundll32 user32.dll,MessageBeep
l.end

# Quit the simulator.
quit
